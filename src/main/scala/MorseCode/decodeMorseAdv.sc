import java.util.NoSuchElementException
import scala.annotation.tailrec

val morseCode = Map(
  ".-" -> "A",
  "-..." -> "B",
  "-.-." -> "C",
  "-.." -> "D",
  "." -> "E",
  "..-." -> "F",
  "--." -> "G",
  "...." -> "H",
  ".." -> "I",
  ".---" -> "J",
  "-.-" -> "K",
  ".-.." -> "L",
  "--" -> "M",
  "-." -> "N",
  "---" -> "O",
  ".--." -> "P",
  "--.-" -> "Q",
  ".-." -> "R",
  "..." -> "S",
  "-" -> "T",
  "..-" -> "U",
  "...-" -> "V",
  ".--" -> "W",
  "-..-" -> "X",
  "-.--" -> "Y",
  "--.." -> "Z",
  ".----" -> "1",
  "..---" -> "2",
  "...--" -> "3",
  "....-" -> "4",
  "....." -> "5",
  "-...." -> "6",
  "--..." -> "7",
  "---.." -> "8",
  "----." -> "9",
  "-----" -> "0",
  "-.-.--" -> "!",
  ".-.-.-" -> ".",
  "...---..." -> "SOS")

@tailrec
def rle(rem: Seq[Char], prev: Char, cnt: Int = 1, acc: List[(Char,Int)] = List.empty): List[(Char,Int)] = {
  if (rem.isEmpty) return acc :+ (prev -> cnt)
  val cur = rem.head
  if (prev == cur) rle(rem.tail, cur, cnt + 1, acc)
  else rle(rem.tail, cur, 1, acc :+ (prev -> cnt))
}

def signalToMorseCode(signal: (Char,Int)): String = {
  signal match {
    case ('1',1) => "."
    case ('1',_) => "-"
    case (_,1) => ""
    case (_,2) => " "
    case (_,3) => " "
    case _ => "   "
  }
}

val bits = "0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000"
val pbits = bits.dropWhile(_ == '0').reverse.dropWhile(_ == '0').reverse

val signalPairs = rle(pbits.tail,pbits.head)
val avgRate = signalPairs.map(_._2).sum.toDouble/signalPairs.length
avgRate
val avgSignalPairs = signalPairs.map{ case(fst,snd) => fst -> (snd/avgRate).ceil.toInt }
avgSignalPairs

val res = avgSignalPairs.map(signalToMorseCode).mkString("")
res

def decodeMorse(code: String): String = {
  code.trim
  .split(" {3}")
  .map(_.split(" ")
  .map{code =>
    if (morseCode.contains(code))
      morseCode(code)
    else
      throw new NoSuchElementException()
  }.mkString(""))
  .mkString(" ")
}

def decodeBitsAdvanced(bits: String): String = {
  val pbits = bits.dropWhile(_ == '0').reverse.dropWhile(_ == '0').reverse
  val signalPairs = rle(pbits.tail, pbits.head)
  val avgRate = signalPairs.map(_._2).sum.toDouble/signalPairs.length
  val avgSignalPairs = signalPairs.map{ case(fst,snd) => fst -> (snd/avgRate).ceil.toInt }
  avgSignalPairs.map(signalToMorseCode).mkString("")
}

decodeMorse(res)

val s1 = "100001111111110000111100011111111101111100001"

decodeMorse(decodeBitsAdvanced("100001"))

decodeMorse(decodeBitsAdvanced("1111100000111111"))
decodeMorse(decodeBitsAdvanced("10111"))
decodeMorse(decodeBitsAdvanced("1110111"))
decodeMorse(decodeBitsAdvanced("111000111"))
decodeMorse(decodeBitsAdvanced

decodeBitsAdvanced(s1)
decodeMorse(decodeBitsAdvanced(s1))

